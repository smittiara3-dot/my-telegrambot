import os
import nest_asyncio
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)

nest_asyncio.apply()

# –°—Ç–∞–Ω–∏ –¥—ñ–∞–ª–æ–≥—É
LOCATION, BOOK, NAME, CONTACT, DURATION = range(5)

locations = ["–ö–∏—ó–≤ ‚Äì –õ—ñ—Ç–ö–∞–≤‚Äô—è—Ä–Ω—è", "–õ—å–≤—ñ–≤ ‚Äì BookCup"]
books_catalog = {
    "–ö–∏—ó–≤ ‚Äì –õ—ñ—Ç–ö–∞–≤‚Äô—è—Ä–Ω—è": ["1984 ‚Äì –î–∂. –û—Ä–≤–µ–ª–ª", "–ú—ñ—Å—Ç–æ ‚Äì –í. –ü—ñ–¥–º–æ–≥–∏–ª—å–Ω–∏–π"],
    "–õ—å–≤—ñ–≤ ‚Äì BookCup": ["–¢–∏–≥—Ä–æ–ª–æ–≤–∏ ‚Äì –Ü–≤–∞–Ω –ë–∞–≥—Ä—è–Ω–∏–π", "–§–µ–ª—ñ–∫—Å –ê–≤—Å—Ç—Ä—ñ—è ‚Äì –°–æ—Ñ—ñ—è –ê–Ω–¥—Ä—É—Ö–æ–≤–∏—á"],
}

TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_CHAT_ID"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 8443))  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 8443 –∞–±–æ 8080, —è–∫ —Ö–æ—á–µ—à

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –í—ñ—Ç–∞—î–º–æ –≤ –±–æ—Ç—ñ –æ—Ä–µ–Ω–¥–∏ –∫–Ω–∏–∂–æ–∫!\n\n–û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é:",
        reply_markup=ReplyKeyboardMarkup([[loc] for loc in locations], one_time_keyboard=True, resize_keyboard=True),
    )
    return LOCATION

async def get_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["location"] = update.message.text
    books = books_catalog.get(update.message.text, [])
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –∫–Ω–∏–≥—É:",
        reply_markup=ReplyKeyboardMarkup([[b] for b in books], one_time_keyboard=True, resize_keyboard=True),
    )
    return BOOK

async def get_book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["book"] = update.message.text
    await update.message.reply_text("–Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text

    contact_button = ReplyKeyboardMarkup(
        [[KeyboardButton(text="üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
        one_time_keyboard=True,
        resize_keyboard=True,
    )

    await update.message.reply_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
        reply_markup=contact_button
    )
    return CONTACT

async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.contact:
        context.user_data["contact"] = update.message.contact.phone_number
    else:
        context.user_data["contact"] = update.message.text  # –Ø–∫—â–æ –≤–≤—ñ–≤ –≤—Ä—É—á–Ω—É

    # –ö–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É —Ç–µ—Ä–º—ñ–Ω—É –æ—Ä–µ–Ω–¥–∏
    duration_buttons = ReplyKeyboardMarkup(
        [
            ["10 –¥–Ω—ñ–≤", "14 –¥–Ω—ñ–≤"],
            ["21 –¥–µ–Ω—å", "30 –¥–Ω—ñ–≤"]
        ],
        one_time_keyboard=True,
        resize_keyboard=True,
    )

    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω –æ—Ä–µ–Ω–¥–∏ –∫–Ω–∏–∂–∫–∏:",
        reply_markup=duration_buttons
    )
    return DURATION

async def get_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["duration"] = update.message.text

    msg = (
        f"–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:\n–Ü–º'—è: {context.user_data['name']}\n"
        f"–õ–æ–∫–∞—Ü—ñ—è: {context.user_data['location']}\n"
        f"–ö–Ω–∏–≥–∞: {context.user_data['book']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {context.user_data['contact']}\n"
        f"–¢–µ—Ä–º—ñ–Ω: {context.user_data['duration']}"
    )

    await context.bot.send_message(chat_id=ADMIN_ID, text=msg)

    await update.message.reply_text("–î—è–∫—É—î–º–æ –∑–∞ –∑–∞—è–≤–∫—É!")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END


def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_location)],
            BOOK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_book)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            CONTACT: [MessageHandler((filters.CONTACT | (filters.TEXT & ~filters.COMMAND)), get_contact)],
            DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_duration)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)

    print(f"–ó–∞–ø—É—Å–∫–∞—é webhook –Ω–∞ –ø–æ—Ä—Ç—ñ {PORT}...")
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=WEBHOOK_URL,
    )


if __name__ == "__main__":
    main()
