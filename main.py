import os
import json
import logging
from dotenv import load_dotenv
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup,
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, filters, ContextTypes,
)
import gspread
from google.oauth2.service_account import Credentials
from google.auth.transport.requests import AuthorizedSession

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

CHOOSE_LOCATION, CHOOSE_GENRE, SHOW_BOOKS, CHOOSE_RENT_DAYS, GET_NAME, GET_CONTACT, CONFIRM_BOOK = range(7)

locations = [f"–ö–∞–≤'—è—Ä–Ω—è {i}" for i in range(1, 21)]
genres = ["–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–†–æ–º–∞–Ω", "–Ü—Å—Ç–æ—Ä—ñ—è", "–î–µ—Ç–µ–∫—Ç–∏–≤"]
books = {
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": ["–î—é–Ω–∞", "1984"],
    "–†–æ–º–∞–Ω": ["–ê–Ω–Ω–∞ –ö–∞—Ä–µ–Ω—ñ–Ω–∞", "–ì–æ—Ä–¥—ñ—Å—Ç—å —ñ —É–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è"],
    "–Ü—Å—Ç–æ—Ä—ñ—è": ["–Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏", "–Ñ–≤—Ä–æ–ø–∞ –•–• —Å—Ç."],
    "–î–µ—Ç–µ–∫—Ç–∏–≤": ["–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å", "–í–±–∏–≤—Å—Ç–≤–æ –≤ ¬´–°—Ö—ñ–¥–Ω–æ–º—É –µ–∫—Å–ø—Ä–µ—Å—ñ¬ª"],
}
book_descriptions = {
    "–î—é–Ω–∞": ("–ï–ø—ñ—á–Ω–∞ —Å–∞–≥–∞ –ø—Ä–æ –ø—É—Å—Ç–µ–ª—å–Ω—É –ø–ª–∞–Ω–µ—Ç—É –ê—Ä–∞–∫—ñ—Å.", "50 –≥—Ä–Ω"),
    "1984": ("–ê–Ω—Ç–∏—É—Ç–æ–ø—ñ—è –ø—Ä–æ —Ç–æ—Ç–∞–ª—ñ—Ç–∞—Ä–Ω–µ –º–∞–π–±—É—Ç–Ω—î.", "45 –≥—Ä–Ω"),
    "–ê–Ω–Ω–∞ –ö–∞—Ä–µ–Ω—ñ–Ω–∞": ("–ö–ª–∞—Å–∏–∫–∞ –ø—Ä–æ –∫–æ—Ö–∞–Ω–Ω—è —ñ –∑—Ä–∞–¥—É.", "40 –≥—Ä–Ω"),
    "–ì–æ—Ä–¥—ñ—Å—Ç—å —ñ —É–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è": ("–Ü—Å—Ç–æ—Ä—ñ—è –ï–ª—ñ–∑–∞–±–µ—Ç –ë–µ–Ω–Ω–µ—Ç —ñ –º—ñ—Å—Ç–µ—Ä–∞ –î–∞—Ä—Å—ñ.", "42 –≥—Ä–Ω"),
    "–Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏": ("–û–≥–ª—è–¥ —ñ—Å—Ç–æ—Ä—ñ—ó –£–∫—Ä–∞—ó–Ω–∏ –∑ –¥–∞–≤–Ω—ñ—Ö —á–∞—Å—ñ–≤.", "55 –≥—Ä–Ω"),
    "–Ñ–≤—Ä–æ–ø–∞ –•–• —Å—Ç.": ("–ü–æ–¥—ñ—ó —Ç–∞ –∑–º—ñ–Ω–∏ –≤ –Ñ–≤—Ä–æ–ø—ñ –•–• —Å—Ç–æ–ª—ñ—Ç—Ç—è.", "50 –≥—Ä–Ω"),
    "–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å": ("–†–æ–∑—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è –¥–µ—Ç–µ–∫—Ç–∏–≤–∞ –•–æ–ª–º—Å–∞.", "38 –≥—Ä–Ω"),
    "–í–±–∏–≤—Å—Ç–≤–æ –≤ ¬´–°—Ö—ñ–¥–Ω–æ–º—É –µ–∫—Å–ø—Ä–µ—Å—ñ¬ª": ("–î–µ—Ç–µ–∫—Ç–∏–≤–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è –ê–≥–∞—Ç–∏ –ö—Ä—ñ—Å—Ç—ñ.", "44 –≥—Ä–Ω"),
}
rental_days = [10, 14, 21, 30]
items_per_page = 10

SCOPES = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
json_creds = os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON")
if not json_creds:
    raise ValueError("GOOGLE_SERVICE_ACCOUNT_JSON env variable is not set")
creds_dict = json.loads(json_creds)
credentials = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
gc = gspread.Client(auth=credentials)
gc.session = AuthorizedSession(credentials)
sh = gc.open("RentalBookBot")
worksheet = sh.sheet1

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("/start –≤—ñ–¥ %s", update.effective_user.first_name)
    keyboard = [[InlineKeyboardButton(loc, callback_data=loc)] for loc in locations[:items_per_page]]
    nav_buttons = []
    if len(locations) > items_per_page:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—ñ", callback_data="loc_next_1"))
        keyboard.append(nav_buttons)

    await update.message.reply_text(
        "üëã *–í–∞—Å –≤—ñ—Ç–∞—î –¢–∏—Ö–∞ –ü–æ–ª–∏—á–∫–∞!*\n"
        "–°—É—á–∞—Å–Ω–∏–π —ñ –∑—Ä—É—á–Ω–∏–π —Å–ø–æ—Å—ñ–± –æ—Ä–µ–Ω–¥–∏ –∫–Ω–∏–∂–æ–∫ —É –∑–∞—Ç–∏—à–Ω–∏—Ö –¥–ª—è –≤–∞—Å –º—ñ—Å—Ü—è—Ö.",
        parse_mode="Markdown"
    )
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOOSE_LOCATION

async def paginate_locations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, direction, page = query.data.split("_")
    page = int(page)
    start = page * items_per_page
    end = start + items_per_page
    keyboard = [[InlineKeyboardButton(loc, callback_data=loc)] for loc in locations[start:end]]
    nav_buttons = []
    if start > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"loc_prev_{page - 1}"))
    if end < len(locations):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—ñ", callback_data=f"loc_next_{page + 1}"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOOSE_LOCATION

async def choose_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["location"] = query.data
    keyboard = [[InlineKeyboardButton(genre, callback_data=genre)] for genre in genres]
    keyboard.append([InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∫–Ω–∏–≥–∏", callback_data="all")])
    await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∂–∞–Ω—Ä –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –≤—Å—ñ –∫–Ω–∏–∂–∫–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOOSE_GENRE

async def choose_genre(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["genre"] = query.data

    all_books = []
    if query.data == "all":
        for book_list in books.values():
            all_books.extend(book_list)
    else:
        all_books = books.get(query.data, [])

    if not all_books:
        await query.edit_message_text("–ù–∞ –∂–∞–ª—å, –Ω–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–Ω–∏–∂–æ–∫ —É —Ü—å–æ–º—É –∂–∞–Ω—Ä—ñ.")
        return ConversationHandler.END

    context.user_data["all_books"] = all_books
    context.user_data["page"] = 0
    return await send_book_list(update, context)

async def send_book_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    books_list = context.user_data["all_books"]
    page = context.user_data.get("page", 0)
    start = page * items_per_page
    end = start + items_per_page
    page_books = books_list[start:end]

    keyboard = [[InlineKeyboardButton(book, callback_data=f"book:{book}")] for book in page_books]
    nav_buttons = []
    if start > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev"))
    if end < len(books_list):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—ñ", callback_data="next"))
    if nav_buttons:
        keyboard.append(nav_buttons)

    await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∫–Ω–∏–≥—É:", reply_markup=InlineKeyboardMarkup(keyboard))
    return SHOW_BOOKS

async def paginate_books(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "next":
        context.user_data["page"] += 1
    elif query.data == "prev":
        context.user_data["page"] -= 1
    return await send_book_list(update, context)

async def select_book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    book_name = query.data.split(":")[1]
    context.user_data["book"] = book_name
    description, price = book_descriptions.get(book_name, ("–ù–µ–º–∞—î –æ–ø–∏—Å—É", "–¶—ñ–Ω–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞"))
    keyboard = [[InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ—Ä–µ–Ω–¥—É", callback_data="confirm")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É –∫–Ω–∏–≥", callback_data="back_books")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∂–∞–Ω—Ä—ñ–≤", callback_data="back_genres")]]
    text = f"*{book_name}*\n{description}\n\nüí∏ –¶—ñ–Ω–∞: {price}"
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
    return CONFIRM_BOOK

async def confirm_book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton(f"{days} –¥–Ω—ñ–≤", callback_data=str(days))] for days in rental_days]
    await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –æ—Ä–µ–Ω–¥–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOOSE_RENT_DAYS

async def choose_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["days"] = query.data
    await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")
    return GET_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text.strip()
    button = KeyboardButton("–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)
    reply_markup = ReplyKeyboardMarkup([[button]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=reply_markup)
    return GET_CONTACT

async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact.phone_number if update.message.contact else update.message.text.strip()
    if not contact or len(contact) < 6:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–∏–º.")
        return GET_CONTACT

    context.user_data["contact"] = contact
    try:
        worksheet.append_row([
            context.user_data.get("location", ""),
            context.user_data.get("genre", ""),
            context.user_data.get("book", ""),
            context.user_data.get("days", ""),
            context.user_data.get("name", ""),
            contact
        ])
        logger.info("–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ Google Sheets")
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ —É Google Sheets: %s", e)
        await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ. üõ†Ô∏è")
        return ConversationHandler.END

    await update.message.reply_text("–î—è–∫—É—î–º–æ! –í–∞—à –∑–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ‚òï", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def back_to_genres(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    return await choose_location(update, context)

async def back_to_books(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    return await send_book_list(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    app = Application.builder().token(os.getenv("BOT_TOKEN")).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSE_LOCATION: [
                CallbackQueryHandler(paginate_locations, pattern="^loc_(next|prev)_\\d+$"),
                CallbackQueryHandler(choose_location)
            ],
            CHOOSE_GENRE: [CallbackQueryHandler(choose_genre)],
            SHOW_BOOKS: [
                CallbackQueryHandler(paginate_books, pattern="^(next|prev)$"),
                CallbackQueryHandler(select_book, pattern="^book:.*")
            ],
            CONFIRM_BOOK: [
                CallbackQueryHandler(confirm_book, pattern="^confirm$"),
                CallbackQueryHandler(back_to_books, pattern="^back_books$"),
                CallbackQueryHandler(back_to_genres, pattern="^back_genres$")
            ],
            CHOOSE_RENT_DAYS: [CallbackQueryHandler(choose_days)],
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            GET_CONTACT: [
                MessageHandler(filters.CONTACT, get_contact),
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_contact)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)

    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 8443)),
        webhook_url=os.getenv("WEBHOOK_URL")
    )

if __name__ == "__main__":
    main()
