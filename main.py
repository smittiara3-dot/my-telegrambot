import os
import json
import logging
from dotenv import load_dotenv
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, filters, ContextTypes,
)
import gspread
from google.oauth2.service_account import Credentials
from google.auth.transport.requests import AuthorizedSession

load_dotenv()

# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°—Ç–∞–Ω–∏
CHOOSE_LOCATION, CHOOSE_GENRE, SHOW_BOOKS, BOOK_DETAILS, CHOOSE_RENT_DAYS, GET_NAME, GET_CONTACT, CONFIRM_ORDER = range(8)

# –î–∞–Ω—ñ –¥–ª—è –±–æ—Ç–∞
locations = [f"–ö–∞–≤'—è—Ä–Ω—è {chr(65+i)}" for i in range(20)]  # 20 –ª–æ–∫–∞—Ü—ñ–π

genres = ["–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–†–æ–º–∞–Ω", "–Ü—Å—Ç–æ—Ä—ñ—è", "–î–µ—Ç–µ–∫—Ç–∏–≤"]

books = {
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": [
        ("–î—é–Ω–∞", "–ï–ø—ñ—á–Ω–∏–π –Ω–∞—É–∫–æ–≤–æ-—Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–Ω–∏–π —Ä–æ–º–∞–Ω –ø—Ä–æ –ø—É—Å—Ç–µ–ª—å–Ω—É –ø–ª–∞–Ω–µ—Ç—É —Ç–∞ –±–æ—Ä–æ—Ç—å–±—É –∑–∞ –≤–∏–∂–∏–≤–∞–Ω–Ω—è.", 120),
        ("1984", "–ê–Ω—Ç–∏—É—Ç–æ–ø—ñ—è –ø—Ä–æ —Ç–æ—Ç–∞–ª—ñ—Ç–∞—Ä–Ω–∏–π —Ä–µ–∂–∏–º —ñ –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–≤—ñ–¥–æ–º—ñ—Å—Ç—é.", 100),
        ("–§—É–Ω–¥–∞—Ü—ñ—è", "–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–Ω–µ–ø–∞–¥—É –ì–∞–ª–∞–∫—Ç–∏—á–Ω–æ—ó —ñ–º–ø–µ—Ä—ñ—ó —ñ –Ω–∞—É–∫–æ–≤–æ–≥–æ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è.", 110),
        ("–ó–æ—Ä—è–Ω–∏–π –¥–µ—Å–∞–Ω—Ç", "–ú—ñ–ª—ñ—Ç–∞—Ä–∏—Å—Ç–∏—á–Ω–∞ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ –∑ –≥–ª–∏–±–æ–∫–∏–º–∏ —Å–æ—Ü—ñ–∞–ª—å–Ω–∏–º–∏ —Ç–µ–º–∞–º–∏.", 105),
        ("–ú–∞—Ä—Å—ñ–∞–Ω–∏–Ω", "–ê—Å—Ç—Ä–æ–Ω–∞–≤—Ç –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –≤–∏–∂–∏—Ç–∏ –Ω–∞ –ú–∞—Ä—Å—ñ –ø—ñ—Å–ª—è –∞–≤–∞—Ä—ñ—ó.", 95),
        ("–¢–µ–º–Ω–∞ –º–∞—Ç–µ—Ä—ñ—è", "–Ü—Å—Ç–æ—Ä—ñ—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏—Ö —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–µ–π —ñ –≤–∏–±–æ—Ä—É.", 115),
        ("–ì—ñ–ø–µ—Ä—ñ–æ–Ω", "–ö–æ—Å–º—ñ—á–Ω–∞ –æ–ø–µ—Ä–∞ –∑ –≥–ª–∏–±–æ–∫–∏–º–∏ —Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–∏–º–∏ —ñ–¥–µ—è–º–∏.", 130),
        ("–ü—ñ—Å–Ω—è –ª—å–æ–¥—É –π –ø–æ–ª—É–º'—è", "–§–µ–Ω—Ç–µ–∑—ñ –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ –ø–æ–ª—ñ—Ç–∏—á–Ω–æ—ó –≥—Ä–∏.", 140),
        ("–ú–∞—à–∏–Ω–∞ —á–∞—Å—É", "–ö–ª–∞—Å–∏—á–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è –ø–æ–¥–æ—Ä–æ–∂–µ–π —É —á–∞—Å—ñ.", 85),
        ("–ö–æ—Å–º—ñ—á–Ω–∞ –æ–¥—ñ—Å—Å–µ—è 2001", "–ì–ª–∏–±–æ–∫–∞ —Ä–æ–∑–ø–æ–≤—ñ–¥—å –ø—Ä–æ –ª—é–¥—Å—å–∫–µ –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó.", 125),
        ("–ê—Ä—Ç–µ–º—ñ–¥–∞", "–ö—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è –Ω–∞ –ú—ñ—Å—è—Ü—ñ.", 90),
    ],
    # –Ü–Ω—à—ñ –∂–∞–Ω—Ä–∏ –∑–∞ –∞–Ω–∞–ª–æ–≥—ñ—î—é...
    "–†–æ–º–∞–Ω": [("–ê–Ω–Ω–∞ –ö–∞—Ä–µ–Ω—ñ–Ω–∞", "–¢—Ä–∞–≥—ñ—á–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è –∫–æ—Ö–∞–Ω–Ω—è —Ç–∞ –º–æ—Ä–∞–ª—å–Ω–∏—Ö –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤.", 100)],
    "–Ü—Å—Ç–æ—Ä—ñ—è": [("–Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏", "–û–≥–ª—è–¥ –∫–ª—é—á–æ–≤–∏—Ö –ø–æ–¥—ñ–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó.", 90)],
    "–î–µ—Ç–µ–∫—Ç–∏–≤": [("–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å", "–ö–ª–∞—Å–∏—á–Ω—ñ –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó.", 80)],
}

rental_days = [10, 14, 21, 30]
books_per_page = 10
locations_per_page = 10

SCOPES = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
json_creds = os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON")
creds_dict = json.loads(json_creds)
credentials = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
gc = gspread.Client(auth=credentials)
gc.session = AuthorizedSession(credentials)
sh = gc.open("RentalBookBot")
worksheet = sh.sheet1

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã *–í–∞—Å –≤—ñ—Ç–∞—î –¢–∏—Ö–∞ –ü–æ–ª–∏—á–∫–∞!*\n–°—É—á–∞—Å–Ω–∏–π —ñ –∑—Ä—É—á–Ω–∏–π —Å–ø–æ—Å—ñ–± –æ—Ä–µ–Ω–¥–∏ –∫–Ω–∏–∂–æ–∫ —É –∑–∞—Ç–∏—à–Ω–∏—Ö –¥–ª—è –≤–∞—Å –º—ñ—Å—Ü—è—Ö.",
        parse_mode="Markdown"
    )
    context.user_data['location_page'] = 0
    return await show_locations(update, context)

async def show_locations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    page = context.user_data.get("location_page", 0)
    start = page * locations_per_page
    end = start + locations_per_page
    page_locs = locations[start:end]
    keyboard = [[InlineKeyboardButton(loc, callback_data=loc)] for loc in page_locs]
    nav_buttons = []
    if start > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="loc_prev"))
    if end < len(locations):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—ñ", callback_data="loc_next"))
    if nav_buttons:
        keyboard.append(nav_buttons)

    if update.message:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.callback_query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOOSE_LOCATION

async def location_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "loc_next":
        context.user_data["location_page"] += 1
    else:
        context.user_data["location_page"] -= 1
    return await show_locations(update, context)

async def choose_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["location"] = query.data
    keyboard = [[InlineKeyboardButton(genre, callback_data=genre)] for genre in genres]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_locations")])
    await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∂–∞–Ω—Ä:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOOSE_GENRE

async def genre_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "back_to_locations":
        return await show_locations(update, context)

    context.user_data["genre"] = query.data
    context.user_data["page"] = 0
    context.user_data["book_list"] = books.get(query.data, [])
    return await show_books(update, context)

async def show_books(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    book_list = context.user_data["book_list"]
    page = context.user_data["page"]
    start = page * books_per_page
    end = start + books_per_page
    page_books = book_list[start:end]
    keyboard = [[InlineKeyboardButton(b[0], callback_data=f"book:{b[0]}")] for b in page_books]
    nav_buttons = []
    if start > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_books"))
    if end < len(book_list):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—ñ", callback_data="next_books"))
    keyboard.append(nav_buttons)
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∂–∞–Ω—Ä—ñ–≤", callback_data="back_to_genres")])
    await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∫–Ω–∏–≥—É:", reply_markup=InlineKeyboardMarkup(keyboard))
    return SHOW_BOOKS

async def paginate_books(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "next_books":
        context.user_data["page"] += 1
    elif query.data == "prev_books":
        context.user_data["page"] -= 1
    elif query.data == "back_to_genres":
        return await choose_location(update, context)
    return await show_books(update, context)

async def show_book_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    book_name = query.data.split(":")[1]
    genre = context.user_data["genre"]
    for b in books[genre]:
        if b[0] == book_name:
            context.user_data["book"] = book_name
            context.user_data["description"] = b[1]
            context.user_data["price"] = b[2]
            break

    keyboard = [
        [InlineKeyboardButton("‚úÖ –û—Ä–µ–Ω–¥—É–≤–∞—Ç–∏", callback_data="rent")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–Ω–∏–≥", callback_data="back_to_books")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∂–∞–Ω—Ä—ñ–≤", callback_data="back_to_genres")],
    ]
    text = f"üìñ *{book_name}*\n{context.user_data['description']}\nüí∞ *–¶—ñ–Ω–∞ –æ—Ä–µ–Ω–¥–∏*: {context.user_data['price']} –≥—Ä–Ω"
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
    return BOOK_DETAILS

async def confirm_rent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton(f"{d} –¥–Ω—ñ–≤", callback_data=str(d))] for d in rental_days]
    await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –æ—Ä–µ–Ω–¥–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOOSE_RENT_DAYS

async def choose_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["days"] = query.data
    await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")
    return GET_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text.strip()
    button = KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)
    reply_markup = ReplyKeyboardMarkup([[button]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=reply_markup)
    return GET_CONTACT

async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact.phone_number if update.message.contact else update.message.text
    context.user_data["contact"] = contact
    try:
        worksheet.append_row([
            context.user_data.get("name"),
            context.user_data.get("contact"),
            context.user_data.get("location"),
            context.user_data.get("genre"),
            context.user_data.get("book"),
            context.user_data.get("days"),
            str(context.user_data.get("price"))
        ])
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ —É Google Sheets: %s", e)
        await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return ConversationHandler.END

    keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏", callback_data="pay")]]
    summary = (
        f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n\n"
        f"üë§ –Ü–º'—è: {context.user_data['name']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {context.user_data['contact']}\n"
        f"üìç –õ–æ–∫–∞—Ü—ñ—è: {context.user_data['location']}\n"
        f"üìö –ñ–∞–Ω—Ä: {context.user_data['genre']}\n"
        f"üìñ –ö–Ω–∏–≥–∞: {context.user_data['book']}\n"
        f"üìÖ –î–Ω—ñ–≤: {context.user_data['days']}\n"
        f"üí∏ –°—É–º–∞: {context.user_data['price']} –≥—Ä–Ω"
    )
    await update.message.reply_text(summary, reply_markup=InlineKeyboardMarkup(keyboard))
    return CONFIRM_ORDER

async def finish_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üéâ –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –†–∞–¥—ñ, —â–æ –≤–∏ –æ–±—Ä–∞–ª–∏ –¢–∏—Ö—É –ü–æ–ª–∏—á–∫—É ‚òï")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    app = Application.builder().token(os.getenv("BOT_TOKEN")).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSE_LOCATION: [
                CallbackQueryHandler(location_pagination, pattern="^loc_(prev|next)$"),
                CallbackQueryHandler(choose_location),
            ],
            CHOOSE_GENRE: [CallbackQueryHandler(genre_selection)],
            SHOW_BOOKS: [
                CallbackQueryHandler(paginate_books, pattern="^(next_books|prev_books|back_to_genres)$"),
                CallbackQueryHandler(show_book_details, pattern="^book:.*"),
            ],
            BOOK_DETAILS: [
                CallbackQueryHandler(confirm_rent, pattern="^rent$"),
                CallbackQueryHandler(show_books, pattern="^back_to_books$"),
                CallbackQueryHandler(choose_location, pattern="^back_to_genres$"),
            ],
            CHOOSE_RENT_DAYS: [CallbackQueryHandler(choose_days)],
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            GET_CONTACT: [MessageHandler(filters.CONTACT | (filters.TEXT & ~filters.COMMAND), get_contact)],
            CONFIRM_ORDER: [CallbackQueryHandler(finish_payment, pattern="^pay$")],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_handler)
    app.run_webhook(listen="0.0.0.0", port=int(os.getenv("PORT", 8443)), webhook_url=os.getenv("WEBHOOK_URL"))

if __name__ == "__main__":
    main()
