import os
import logging
import asyncio
from telegram import ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

logging.basicConfig(level=logging.INFO)

# Conversation steps
LOCATION, BOOK, NAME, CONTACT, DURATION = range(5)

# –ü—Ä–∏–∫–ª–∞–¥–Ω—ñ –¥–∞–Ω—ñ
locations = ["–ö–∞–≤ º—è—Ä–Ω—è A", "–ö–∞–≤ º—è—Ä–Ω—è B"]
books = {
    "–ö–∞–≤ º—è—Ä–Ω—è A": ["1984", "–ì–∞—Ä—Ä—ñ –ü–æ—Ç—Ç–µ—Ä", "–ú–∞–π—Å—Ç–µ—Ä —ñ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞"],
    "–ö–∞–≤ º—è—Ä–Ω—è B": ["–ê—Ç–ª–∞–Ω—Ç —Ä–æ–∑–ø—Ä–∞–≤–∏–≤ –ø–ª–µ—á—ñ", "–ö–æ–±–∑–∞—Ä", "–í–µ–ª–∏–∫–∏–π –ì–µ—Ç—Å–±—ñ"]
}

user_data_temp = {}

# –°—Ç–∞—Ä—Ç
async def start(update, context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = [locations]
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –ª–æ–∫–∞—Ü—ñ—é –ø–æ–ª–∏—Ü—ñ üìç",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return LOCATION

# –õ–æ–∫–∞—Ü—ñ—è
async def get_location(update, context):
    user_data_temp["location"] = update.message.text
    reply_keyboard = [books.get(user_data_temp["location"], [])]
    await update.message.reply_text(
        "–û–±–µ—Ä–∏ –∫–Ω–∏–≥—É üìö",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return BOOK

# –ö–Ω–∏–≥–∞
async def get_book(update, context):
    user_data_temp["book"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º º—è:")
    return NAME

# –Ü–º º—è
async def get_name(update, context):
    user_data_temp["name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –∫–æ–Ω—Ç–∞–∫—Ç:")
    return CONTACT

# –ö–æ–Ω—Ç–∞–∫—Ç
async def get_contact(update, context):
    user_data_temp["contact"] = update.message.text
    await update.message.reply_text("–ù–∞ —Å–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ —Ö–æ—á–µ—à –≤–∑—è—Ç–∏ –∫–Ω–∏–≥—É?")
    return DURATION

# –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å
async def get_duration(update, context):
    user_data_temp["duration"] = update.message.text
    message = (
        f"–ù–æ–≤–∞ –æ—Ä–µ–Ω–¥–∞ –∫–Ω–∏–≥–∏ üìñ:\n\n"
        f"üè† –õ–æ–∫–∞—Ü—ñ—è: {user_data_temp['location']}\n"
        f"üìö –ö–Ω–∏–≥–∞: {user_data_temp['book']}\n"
        f"üë§ –Ü–º º—è: {user_data_temp['name']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {user_data_temp['contact']}\n"
        f"üïí –¢–µ—Ä–º—ñ–Ω: {user_data_temp['duration']} –¥–Ω—ñ–≤"
    )

    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message)
    await update.message.reply_text("–î—è–∫—É—î–º–æ! –î–∞–Ω—ñ –ø–µ—Ä–µ–¥–∞–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. ‚úÖ")

    return ConversationHandler.END

# –°–∫–∞—Å—É–≤–∞–Ω–Ω—è
async def cancel(update, context):
    await update.message.reply_text("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∏–π webhook-–∑–∞–ø—É—Å–∫
async def main():
    app = Application.builder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_location)],
            BOOK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_book)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_contact)],
            DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_duration)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)

    # –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook
    await app.bot.set_webhook(url=WEBHOOK_URL)

    # –ó–∞–ø—É—Å–∫
    await app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8080)),
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    asyncio.run(main())
