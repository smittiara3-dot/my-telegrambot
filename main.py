import os
import json
import logging
from dotenv import load_dotenv
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, filters, ContextTypes,
)
import gspread
from google.oauth2.service_account import Credentials
from google.auth.transport.requests import AuthorizedSession

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

CHOOSE_LOCATION, CHOOSE_GENRE, SHOW_BOOKS, CHOOSE_BOOK, CHOOSE_RENT_DAYS, GET_NAME, GET_CONTACT, CONFIRM_ORDER = range(8)

locations = [f"–ö–∞–≤'—è—Ä–Ω—è {chr(65+i)}" for i in range(20)]
genres = ["–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–†–æ–º–∞–Ω", "–Ü—Å—Ç–æ—Ä—ñ—è", "–î–µ—Ç–µ–∫—Ç–∏–≤"]
rental_days = [10, 14, 21, 30]
books_per_page = 10
locations_per_page = 10

books = {
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": [
        {"title": f"–§–∞–Ω—Ç–∞—Å—Ç–∏—á–Ω–∞ –∫–Ω–∏–≥–∞ {i+1}", "description": f"–û–ø–∏—Å —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–Ω–æ—ó –∫–Ω–∏–≥–∏ {i+1}", "price": (i+1)*2} for i in range(15)
    ],
    "–†–æ–º–∞–Ω": [
        {"title": "–ê–Ω–Ω–∞ –ö–∞—Ä–µ–Ω—ñ–Ω–∞", "description": "–ö–ª–∞—Å–∏—á–Ω–∏–π —Ä–æ–º–∞–Ω –õ—å–≤–∞ –¢–æ–ª—Å—Ç–æ–≥–æ", "price": 25},
        {"title": "–ì–æ—Ä–¥—ñ—Å—Ç—å —ñ —É–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "description": "–†–æ–º–∞–Ω –î–∂–µ–π–Ω –û—Å—Ç—ñ–Ω –ø—Ä–æ –∫–æ—Ö–∞–Ω–Ω—è —ñ –≥–æ—Ä–¥—ñ—Å—Ç—å", "price": 20},
    ],
    "–Ü—Å—Ç–æ—Ä—ñ—è": [
        {"title": "–Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏", "description": "–í—Å–µ –ø—Ä–æ —ñ—Å—Ç–æ—Ä—ñ—é –£–∫—Ä–∞—ó–Ω–∏", "price": 30},
        {"title": "–Ñ–≤—Ä–æ–ø–∞ –•–• —Å—Ç.", "description": "–Ü—Å—Ç–æ—Ä–∏—á–Ω—ñ –ø–æ–¥—ñ—ó –Ñ–≤—Ä–æ–ø–∏ —É 20 —Å—Ç–æ–ª—ñ—Ç—Ç—ñ", "price": 28},
    ],
    "–î–µ—Ç–µ–∫—Ç–∏–≤": [
        {"title": "–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å", "description": "–ö–ª–∞—Å–∏—á–Ω–∏–π –¥–µ—Ç–µ–∫—Ç–∏–≤ –ø—Ä–æ –®–µ—Ä–ª–æ–∫–∞", "price": 22},
        {"title": "–í–±–∏–≤—Å—Ç–≤–æ –≤ ¬´–°—Ö—ñ–¥–Ω–æ–º—É –µ–∫—Å–ø—Ä–µ—Å—ñ¬ª", "description": "–î–µ—Ç–µ–∫—Ç–∏–≤ –≤—ñ–¥ –ê–≥–∞—Ç–∏ –ö—Ä—ñ—Å—Ç—ñ", "price": 24},
    ],
}

SCOPES = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']

json_creds = os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON")
if not json_creds:
    raise ValueError("GOOGLE_SERVICE_ACCOUNT_JSON env variable is not set")

creds_dict = json.loads(json_creds)
credentials = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
gc = gspread.Client(auth=credentials)
gc.session = AuthorizedSession(credentials)
sh = gc.open("RentalBookBot")
worksheet = sh.sheet1

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    keyboard = [
        [InlineKeyboardButton(loc, callback_data=f"location:{loc}")] for loc in locations[:locations_per_page]
    ]
    await update.message.reply_text(
        "üëã *–í–∞—Å –≤—ñ—Ç–∞—î –¢–∏—Ö–∞ –ü–æ–ª–∏—á–∫–∞!* ‚Äì —Å—É—á–∞—Å–Ω–∏–π —ñ –∑—Ä—É—á–Ω–∏–π —Å–ø–æ—Å—ñ–± –æ—Ä–µ–Ω–¥–∏ –∫–Ω–∏–∂–æ–∫ —É –∑–∞—Ç–∏—à–Ω–∏—Ö –¥–ª—è –≤–∞—Å –º—ñ—Å—Ü—è—Ö.",
        parse_mode='Markdown'
    )
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOOSE_LOCATION

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    location = query.data.split(":")[1]
    context.user_data["location"] = location
    keyboard = [[InlineKeyboardButton(g, callback_data=f"genre:{g}")] for g in genres]
    keyboard.append([InlineKeyboardButton("üìö –í—Å—ñ –∫–Ω–∏–≥–∏", callback_data="genre:all")])
    keyboard.append([InlineKeyboardButton("üè† –î–æ –ª–æ–∫–∞—Ü—ñ–π", callback_data="back_to_locations")])
    await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∂–∞–Ω—Ä:", reply_markup=InlineKeyboardMarkup(keyboard))
    return SHOW_BOOKS

async def handle_genre(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    genre = query.data.split(":")[1]
    context.user_data["genre"] = genre
    all_books = []
    if genre == "all":
        for g in books.values():
            all_books.extend(g)
    else:
        all_books = books.get(genre, [])

    context.user_data["book_list"] = all_books

    keyboard = []
    for b in all_books[:books_per_page]:
        keyboard.append([InlineKeyboardButton(b["title"], callback_data=f"book:{b['title']}")])

    keyboard.append([InlineKeyboardButton("üè† –î–æ –ª–æ–∫–∞—Ü—ñ–π", callback_data="back_to_locations")])
    keyboard.append([InlineKeyboardButton("üîô –î–æ –∂–∞–Ω—Ä—ñ–≤", callback_data="back_to_genres")])
    await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∫–Ω–∏–≥—É:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOOSE_BOOK

async def handle_book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    title = query.data.split(":")[1]
    book_list = context.user_data.get("book_list", [])
    book = next((b for b in book_list if b["title"] == title), None)
    if not book:
        await query.edit_message_text("–ö–Ω–∏–≥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return SHOW_BOOKS
    context.user_data["selected_book"] = book

    msg = f"üìñ *{book['title']}*\n"
    msg += f"üìù {book['description']}\n"
    msg += f"üí∞ –û—Ä–µ–Ω–¥–∞: {book['price']} –≥—Ä–Ω"
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û—Ä–µ–Ω–¥—É–≤–∞—Ç–∏", callback_data="confirm_rent")],
        [InlineKeyboardButton("üîô –î–æ –∫–Ω–∏–≥", callback_data="back_to_books")],
        [InlineKeyboardButton("üóÇ –î–æ –∂–∞–Ω—Ä—ñ–≤", callback_data="back_to_genres")],
        [InlineKeyboardButton("üè† –î–æ –ª–æ–∫–∞—Ü—ñ–π", callback_data="back_to_locations")]
    ]
    await query.edit_message_text(msg, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    return CHOOSE_RENT_DAYS

async def choose_rent_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton(f"{d} –¥–Ω—ñ–≤", callback_data=f"rent:{d}")] for d in rental_days]
    keyboard.append([InlineKeyboardButton("üîô –î–æ –∫–Ω–∏–≥", callback_data="back_to_books")])
    keyboard.append([InlineKeyboardButton("üè† –î–æ –ª–æ–∫–∞—Ü—ñ–π", callback_data="back_to_locations")])
    await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –æ—Ä–µ–Ω–¥–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
    return GET_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    rent_days = int(query.data.split(":")[1])
    context.user_data["days"] = rent_days
    await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à–µ —ñ–º'—è:")
    return GET_CONTACT

async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    button = KeyboardButton("–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)
    await update.message.reply_text("–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º:", reply_markup=ReplyKeyboardMarkup([[button]], one_time_keyboard=True))
    return CONFIRM_ORDER

async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact.phone_number if update.message.contact else update.message.text
    context.user_data["contact"] = contact

    loc = context.user_data.get("location", "[–Ω–µ –≤–∏–±—Ä–∞–Ω–æ]")
    genre = context.user_data.get("genre", "[–Ω–µ –≤–∏–±—Ä–∞–Ω–æ]")
    book = context.user_data.get("selected_book", {})
    name = context.user_data.get("name", "[–Ω–µ –≤–∫–∞–∑–∞–Ω–æ]")
    days = context.user_data.get("days", 0)
    price = book.get("price", 0)
    contact = context.user_data.get("contact", "[–Ω–µ –≤–∫–∞–∑–∞–Ω–æ]")

    worksheet.append_row([loc, genre, book.get("title", "-"), name, contact, days, price])

    msg = f"üìö *–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n"
    msg += f"üè† –õ–æ–∫–∞—Ü—ñ—è: {loc}\n"
    msg += f"üìñ –ö–Ω–∏–≥–∞: {book.get('title', '-')}\n"
    msg += f"üóÇ –ñ–∞–Ω—Ä: {genre}\n"
    msg += f"üìÜ –î–Ω—ñ–≤: {days}\n"
    msg += f"üë§ –Ü–º'—è: {name}\n"
    msg += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n\n"
    msg += f"–°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏: {price} –≥—Ä–Ω"

    keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏", url="https://example.com/pay")]]
    await update.message.reply_text(msg, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    await update.message.reply_text("–î—è–∫—É—î–º–æ, —â–æ –æ–±—Ä–∞–ª–∏ –Ω–∞—à —Å–µ—Ä–≤—ñ—Å! üìñ")
    return ConversationHandler.END

async def fallback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.")

async def callback_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.callback_query.data
    if data.startswith("location:"):
        return await handle_location(update, context)
    elif data.startswith("genre:"):
        return await handle_genre(update, context)
    elif data.startswith("book:"):
        return await handle_book(update, context)
    elif data.startswith("rent:"):
        return await get_name(update, context)
    elif data == "confirm_rent":
        return await choose_rent_days(update, context)
    elif data == "back_to_books":
        return await handle_genre(update, context)
    elif data == "back_to_genres":
        return await handle_location(update, context)
    elif data == "back_to_locations":
        return await start(update, context)

    await update.callback_query.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è")
    return ConversationHandler.END

def main():
    app = Application.builder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSE_LOCATION: [CallbackQueryHandler(callback_router)],
            CHOOSE_GENRE: [CallbackQueryHandler(callback_router)],
            SHOW_BOOKS: [CallbackQueryHandler(callback_router)],
            CHOOSE_BOOK: [CallbackQueryHandler(callback_router)],
            CHOOSE_RENT_DAYS: [CallbackQueryHandler(callback_router)],
            GET_NAME: [CallbackQueryHandler(callback_router)],
            GET_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_contact)],
            CONFIRM_ORDER: [MessageHandler(filters.CONTACT | filters.TEXT, confirm_order)]
        },
        fallbacks=[MessageHandler(filters.COMMAND, fallback_handler)]
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(callback_router))

    app.run_polling()

if __name__ == '__main__':
    main()
