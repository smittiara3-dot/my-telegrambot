import logging
import telegram
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
client = gspread.authorize(creds)
sheet = client.open("RentalBookBot").sheet1
worksheet = sheet

# –°—Ç–∞–Ω —Ä–æ–∑–º–æ–≤–∏
CHOOSE_LOCATION, CHOOSE_GENRE, SHOW_BOOKS, CHOOSE_RENT_DAYS, GET_NAME, GET_CONTACT = range(6)

# –î–∞–Ω—ñ
genres = {
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": ["–î—é–Ω–∞", "1984", "451 –≥—Ä–∞–¥—É—Å –∑–∞ –§–∞—Ä–µ–Ω–≥–µ–π—Ç–æ–º", "–ü—ñ–∫–Ω—ñ–∫ –Ω–∞ —É–∑–±—ñ—á—á—ñ"],
    "–†–æ–º–∞–Ω—Ç–∏–∫–∞": ["–ì–æ—Ä–¥—ñ—Å—Ç—å —ñ —É–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ö–æ—Ö–∞–Ω–µ—Ü—å –ª–µ–¥—ñ –ß–∞—Ç—Ç–µ—Ä–ª–µ–π", "–¢–∏—Ö–∏–π –î–æ–Ω"],
    "–î–µ—Ç–µ–∫—Ç–∏–≤": ["–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å", "–î–µ—Å—è—Ç—å –Ω–µ–≥—Ä–µ–Ω—è—Ç", "–î—ñ–≤—á–∏–Ω–∞ —É –ø–æ—Ç—è–≥—É"],
}

book_info = {
    "–î—é–Ω–∞": {"desc": "–ù–∞—É–∫–æ–≤–æ-—Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–Ω–∏–π —Ä–æ–º–∞–Ω –§—Ä–µ–Ω–∫–∞ –ì–µ—Ä–±–µ—Ä—Ç–∞.", "price": "50 –≥—Ä–Ω"},
    "1984": {"desc": "–ê–Ω—Ç–∏—É—Ç–æ–ø—ñ—è –î–∂–æ—Ä–¥–∂–∞ –û—Ä–≤–µ–ª–ª–∞.", "price": "45 –≥—Ä–Ω"},
    "451 –≥—Ä–∞–¥—É—Å –∑–∞ –§–∞—Ä–µ–Ω–≥–µ–π—Ç–æ–º": {"desc": "–ö–Ω–∏–≥–∞ –ø—Ä–æ –º–∞–π–±—É—Ç–Ω—î, –¥–µ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ —á–∏—Ç–∞—Ç–∏ –∫–Ω–∏–≥–∏.", "price": "40 –≥—Ä–Ω"},
    "–ü—ñ–∫–Ω—ñ–∫ –Ω–∞ —É–∑–±—ñ—á—á—ñ": {"desc": "–ü–æ–≤—ñ—Å—Ç—å –±—Ä–∞—Ç—ñ–≤ –°—Ç—Ä—É–≥–∞—Ü—å–∫–∏—Ö –ø—Ä–æ –∑–æ–Ω—É –∞–Ω–æ–º–∞–ª—ñ–π.", "price": "55 –≥—Ä–Ω"},
    "–ì–æ—Ä–¥—ñ—Å—Ç—å —ñ —É–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è": {"desc": "–ö–ª–∞—Å–∏—á–Ω–∏–π —Ä–æ–º–∞–Ω –î–∂–µ–π–Ω –û—Å—Ç—ñ–Ω.", "price": "35 –≥—Ä–Ω"},
    "–ö–æ—Ö–∞–Ω–µ—Ü—å –ª–µ–¥—ñ –ß–∞—Ç—Ç–µ—Ä–ª–µ–π": {"desc": "–°–∫–∞–Ω–¥–∞–ª—å–Ω–∏–π —Ä–æ–º–∞–Ω –î–µ–≤—ñ–¥–∞ –õ–æ—É—Ä–µ–Ω—Å–∞.", "price": "50 –≥—Ä–Ω"},
    "–¢–∏—Ö–∏–π –î–æ–Ω": {"desc": "–ï–ø—ñ—á–Ω–∏–π —Ä–æ–º–∞–Ω –ú–∏—Ö–∞–π–ª–∞ –®–æ–ª–æ—Ö–æ–≤–∞.", "price": "60 –≥—Ä–Ω"},
    "–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å": {"desc": "–ö–ª–∞—Å–∏—á–Ω—ñ –¥–µ—Ç–µ–∫—Ç–∏–≤–∏ –ê—Ä—Ç—É—Ä–∞ –ö–æ–Ω–∞–Ω –î–æ–π–ª—è.", "price": "30 –≥—Ä–Ω"},
    "–î–µ—Å—è—Ç—å –Ω–µ–≥—Ä–µ–Ω—è—Ç": {"desc": "–î–µ—Ç–µ–∫—Ç–∏–≤–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è –ê–≥–∞—Ç–∏ –ö—Ä—ñ—Å—Ç—ñ.", "price": "35 –≥—Ä–Ω"},
    "–î—ñ–≤—á–∏–Ω–∞ —É –ø–æ—Ç—è–≥—É": {"desc": "–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∏–π —Ç—Ä–∏–ª–µ—Ä –ü–æ–ª–∏ –ì–æ—É–∫—ñ–Ω–∑.", "price": "40 –≥—Ä–Ω"},
}

locations = [f"–ö–∞–≤'—è—Ä–Ω—è ‚Ññ{i}" for i in range(1, 21)]
locations_per_page = 10
books_per_page = 10

# –û–±—Ä–æ–±–Ω–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("/start –≤—ñ–¥ %s", update.effective_user.first_name)
    context.user_data["location_page"] = 0
    text = (
        "üëã *–í–∞—Å –≤—ñ—Ç–∞—î –¢–∏—Ö–∞ –ü–æ–ª–∏—á–∫–∞!*

"
        "–°—É—á–∞—Å–Ω–∏–π —ñ –∑—Ä—É—á–Ω–∏–π —Å–ø–æ—Å—ñ–± –æ—Ä–µ–Ω–¥–∏ –∫–Ω–∏–∂–æ–∫ —É –∑–∞—Ç–∏—à–Ω–∏—Ö –¥–ª—è –≤–∞—Å –º—ñ—Å—Ü—è—Ö.
"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑–∞–∫–ª–∞–¥:"
    )
    return await send_location_list(update, context, new_message=True, intro_text=text)

async def send_location_list(update: Update, context: ContextTypes.DEFAULT_TYPE, new_message=False, intro_text=None):
    page = context.user_data.get("location_page", 0)
    start = page * locations_per_page
    end = start + locations_per_page
    page_locations = locations[start:end]

    keyboard = [[InlineKeyboardButton(loc, callback_data=loc)] for loc in page_locations]
    nav_buttons = []
    if start > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="loc_prev"))
    if end < len(locations):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—ñ", callback_data="loc_next"))
    if nav_buttons:
        keyboard.append(nav_buttons)

    if new_message:
        await update.message.reply_text(intro_text or "–û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é:", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
    else:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(intro_text or "–û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é:", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
    return CHOOSE_LOCATION

async def paginate_locations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "loc_next":
        context.user_data["location_page"] += 1
    elif query.data == "loc_prev":
        context.user_data["location_page"] -= 1
    return await send_location_list(update, context)

async def choose_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["location"] = query.data
    keyboard = [[InlineKeyboardButton(genre, callback_data=genre)] for genre in genres]
    await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∂–∞–Ω—Ä:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOOSE_GENRE

async def choose_genre(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["genre"] = query.data
    context.user_data["book_page"] = 0
    return await show_books(update, context)

async def show_books(update: Update, context: ContextTypes.DEFAULT_TYPE):
    page = context.user_data.get("book_page", 0)
    genre = context.user_data.get("genre", "")
    book_list = genres.get(genre, [])
    start = page * books_per_page
    end = start + books_per_page
    page_books = book_list[start:end]

    keyboard = [[InlineKeyboardButton(book, callback_data=book)] for book in page_books]
    nav_buttons = []
    if start > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_books"))
    if end < len(book_list):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—ñ", callback_data="next_books"))
    if nav_buttons:
        keyboard.append(nav_buttons)

    await update.callback_query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∫–Ω–∏–≥—É:", reply_markup=InlineKeyboardMarkup(keyboard))
    return SHOW_BOOKS

async def paginate_books(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "next_books":
        context.user_data["book_page"] += 1
    elif query.data == "prev_books":
        context.user_data["book_page"] -= 1
    return await show_books(update, context)

async def select_book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["book"] = query.data
    book_title = context.user_data["book"]
    info = book_info.get(book_title, {"desc": "–û–ø–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.", "price": "–ù–µ–≤—ñ–¥–æ–º–æ"})

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ—Ä–µ–Ω–¥—É", callback_data="confirm_rent")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É –∫–Ω–∏–≥", callback_data="back_to_books")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∂–∞–Ω—Ä—ñ–≤", callback_data="back_to_genres")]
    ]

    text = f"*{book_title}*

üìù {info['desc']}
üí∞ –û—Ä–µ–Ω–¥–∞: {info['price']}

–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç–µ –æ—Ä–µ–Ω–¥—É?"
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
    return "BOOK_CONFIRM"

async def choose_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["days"] = query.data
    await query.edit_message_text("üë§ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")
    return "GET_NAME"

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if not name or len(name) < 2:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–µ —ñ–º'—è.")
        return "GET_NAME"
    context.user_data["name"] = name
    keyboard = [[InlineKeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", callback_data="request_contact")]]
    await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=InlineKeyboardMarkup(keyboard))
    return "GET_CONTACT"

async def request_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [[KeyboardButton("üì≤ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä", request_contact=True)]]
    await query.message.reply_text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True))
    return GET_CONTACT

async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.contact:
        contact = update.message.contact.phone_number
    else:
        contact = update.message.text.strip()
    if not contact or len(contact) < 6:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
        return GET_CONTACT
    context.user_data["contact"] = contact
    try:
        worksheet.append_row([
            context.user_data.get("location", ""),
            context.user_data.get("genre", ""),
            context.user_data.get("book", ""),
            context.user_data.get("days", ""),
            context.user_data.get("name", ""),
            contact
        ])
    except Exception as e:
        await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return ConversationHandler.END
    await update.message.reply_text("‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à –∑–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ‚òï", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    app = Application.builder().token("BOT_TOKEN").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSE_LOCATION: [
                CallbackQueryHandler(paginate_locations, pattern="^loc_(next|prev)$"),
                CallbackQueryHandler(choose_location),
            ],
            CHOOSE_GENRE: [CallbackQueryHandler(choose_genre)],
            SHOW_BOOKS: [
                CallbackQueryHandler(paginate_books, pattern="^(next_books|prev_books)$"),
                CallbackQueryHandler(select_book),
            ],
            "BOOK_CONFIRM": [
                CallbackQueryHandler(choose_genre, pattern="^back_to_genres$"),
                CallbackQueryHandler(paginate_books, pattern="^back_to_books$"),
                CallbackQueryHandler(choose_days, pattern="^confirm_rent$")
            ],
            CHOOSE_RENT_DAYS: [CallbackQueryHandler(choose_days)],
            "GET_NAME": [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            "GET_CONTACT": [
                CallbackQueryHandler(request_contact, pattern="^request_contact$"),
                MessageHandler(filters.CONTACT | filters.TEXT & ~filters.COMMAND, get_contact)
            ],
        },
        fallbacks=[],
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
