import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes

# –°—Ç–∞–Ω–∏ –¥—ñ–∞–ª–æ–≥—É
LOCATION, BOOK, NAME, CONTACT, DURATION = range(5)

# –î–∞–Ω—ñ
locations = ["–ö–∏—ó–≤ ‚Äì –õ—ñ—Ç–ö–∞–≤‚Äô—è—Ä–Ω—è", "–õ—å–≤—ñ–≤ ‚Äì BookCup"]
books_catalog = {
    "–ö–∏—ó–≤ ‚Äì –õ—ñ—Ç–ö–∞–≤‚Äô—è—Ä–Ω—è": ["1984 ‚Äì –î–∂. –û—Ä–≤–µ–ª–ª", "–ú—ñ—Å—Ç–æ ‚Äì –í. –ü—ñ–¥–º–æ–≥–∏–ª—å–Ω–∏–π"],
    "–õ—å–≤—ñ–≤ ‚Äì BookCup": ["–¢–∏–≥—Ä–æ–ª–æ–≤–∏ ‚Äì –Ü–≤–∞–Ω –ë–∞–≥—Ä—è–Ω–∏–π", "–§–µ–ª—ñ–∫—Å –ê–≤—Å—Ç—Ä—ñ—è ‚Äì –°–æ—Ñ—ñ—è –ê–Ω–¥—Ä—É—Ö–æ–≤–∏—á"]
}

TOKEN = os.getenv("8409973335:AAHaYO-_K8_gPdcYPtO7ycWerEUFq4bgPpk")
ADMIN_ID = int(os.getenv("1332202691"))  # –¢–≤—ñ–π Telegram ID

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –í—ñ—Ç–∞—î–º–æ –≤ –±–æ—Ç—ñ *–æ—Ä–µ–Ω–¥–∏ –∫–Ω–∏–∂–æ–∫* —É –∫–∞–≤'—è—Ä–Ω—è—Ö!\n\n"
        "üìö –í–∏–±–∏—Ä–∞–π –∫–Ω–∏–∂–∫—É ‚Äì —á–∏—Ç–∞–π –Ω–∞ –º—ñ—Å—Ü—ñ –∞–±–æ –±–µ—Ä–∏ –∑ —Å–æ–±–æ—é!\n\n"
        "–î–∞–≤–∞–π –æ–±–µ—Ä–µ–º–æ –ª–æ–∫–∞—Ü—ñ—é üìç",
        reply_markup=ReplyKeyboardMarkup([[l] for l in locations], one_time_keyboard=True, resize_keyboard=True)
    )
    return LOCATION

async def get_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["location"] = update.message.text
    books = books_catalog.get(update.message.text, [])
    await update.message.reply_text(
        "–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–Ω–∏–∂–∫–∏ –Ω–∞ —Ü—ñ–π –ª–æ–∫–∞—Ü—ñ—ó:\nüìö",
        reply_markup=ReplyKeyboardMarkup([[b] for b in books], one_time_keyboard=True, resize_keyboard=True)
    )
    return BOOK

async def get_book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["book"] = update.message.text
    await update.message.reply_text("–Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–ó–∞–ª–∏—à—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ email:")
    return CONTACT

async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["contact"] = update.message.text
    await update.message.reply_text("–ù–∞ —Å–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ –±–∞–∂–∞—î—Ç–µ –æ—Ä–µ–Ω–¥—É–≤–∞—Ç–∏ –∫–Ω–∏–∂–∫—É?")
    return DURATION

async def get_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["duration"] = update.message.text

    msg = (
        "üì¶ –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ä–µ–Ω–¥—É:\n"
        f"üë§ –Ü–º‚Äô—è: {context.user_data['name']}\n"
        f"üìç –õ–æ–∫–∞—Ü—ñ—è: {context.user_data['location']}\n"
        f"üìö –ö–Ω–∏–≥–∞: {context.user_data['book']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {context.user_data['contact']}\n"
        f"üïì –¢–µ—Ä–º—ñ–Ω: {context.user_data['duration']} –¥–Ω—ñ–≤"
    )

    await context.bot.send_message(chat_id=ADMIN_ID, text=msg)

    await update.message.reply_text(
        "‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–∞—è–≤–∫—É!\n"
        "–ù–∞—à –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –∑ –≤–∞–º–∏ –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è.\n\n"
        "üìç –ó–∞–±—Ä–∞—Ç–∏ –∫–Ω–∏–∂–∫—É –º–æ–∂–Ω–∞ –Ω–∞ –æ–±—Ä–∞–Ω—ñ–π –ª–æ–∫–∞—Ü—ñ—ó. –ü—Ä–∏—î–º–Ω–æ–≥–æ —á–∏—Ç–∞–Ω–Ω—è!"
    )

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# --- MAIN ---

app = ApplicationBuilder().token(TOKEN).build()

conv = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_location)],
        BOOK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_book)],
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
        CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_contact)],
        DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_duration)],
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)

app.add_handler(conv)
print("–ë–æ—Ç –ø—Ä–∞—Ü—é—î...")

app.run_polling()
